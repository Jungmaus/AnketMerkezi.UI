// <auto-generated />
using System;
using AnketMerkezi.Data.ORM.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnketMerkezi.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20181103115523_Ferihaa")]
    partial class Ferihaa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("CreaterWebUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Status");

                    b.Property<int>("SubjectType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CreaterWebUserID");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequestMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(700);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SupportRequestID");

                    b.Property<int>("WebUserID");

                    b.HasKey("ID");

                    b.HasIndex("SupportRequestID");

                    b.HasIndex("WebUserID");

                    b.ToTable("SupportRequestMessages");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequestMessageDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("FilePath")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SupportRequestMessageID");

                    b.HasKey("ID");

                    b.HasIndex("SupportRequestMessageID");

                    b.ToTable("SupportRequestMessageDocuments");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.Survey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LinkCode")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("DataType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequired");

                    b.Property<int?>("MaxLength");

                    b.Property<int?>("MinLength");

                    b.Property<int>("SurveyID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.ToTable("SurveyContents");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyVisit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("DeviceType");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("IpAdress")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("SurveyID");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.ToTable("SurveyVisits");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyVisitAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(750);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SurveyContentID");

                    b.Property<int>("SurveyVisitID");

                    b.HasKey("ID");

                    b.HasIndex("SurveyContentID");

                    b.HasIndex("SurveyVisitID");

                    b.ToTable("SurveyVisitAnswers");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountType");

                    b.Property<DateTime>("AddDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.UserDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.UserOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountType");

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("DayCount");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserOrders");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequest", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.User", "User")
                        .WithMany("SupportRequests")
                        .HasForeignKey("CreaterWebUserID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequestMessage", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.SupportRequest", "SupportRequest")
                        .WithMany("SupportRequestMessages")
                        .HasForeignKey("SupportRequestID");

                    b.HasOne("AnketMerkezi.Data.ORM.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("WebUserID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SupportRequestMessageDocument", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.SupportRequestMessage", "SupportRequestMessage")
                        .WithMany("SupportRequestDocuments")
                        .HasForeignKey("SupportRequestMessageID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.Survey", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyContent", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.Survey", "Survey")
                        .WithMany("SurveyContents")
                        .HasForeignKey("SurveyID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyVisit", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.Survey", "Survey")
                        .WithMany("SurveyVisits")
                        .HasForeignKey("SurveyID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.SurveyVisitAnswer", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.SurveyContent", "SurveyContent")
                        .WithMany("SurveyVisitAnswers")
                        .HasForeignKey("SurveyContentID");

                    b.HasOne("AnketMerkezi.Data.ORM.Entities.SurveyVisit", "SurveyVisit")
                        .WithMany("SurveyVisitAnswers")
                        .HasForeignKey("SurveyVisitID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.UserDetail", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("AnketMerkezi.Data.ORM.Entities.UserOrder", b =>
                {
                    b.HasOne("AnketMerkezi.Data.ORM.Entities.User", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
